{"version":3,"sources":["components/Title/Title.js","components/Form/Form.js","components/Weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","_ref","onInputChange","onButtonSubmit","style","backgroundColor","type","name","placeholder","onChange","onClick","Weather","icon","weather","degree","country","city","description","src","concat","alt","api","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getWeather","asyncToGenerator","regenerator_default","mark","_callee","location","res","data","wrap","_context","prev","next","fetch","sent","json","console","log","setState","temp","main","condition","sys","state","t0","stop","_x","apply","arguments","e","input","target","value","onKeyPress","event","keyCode","charCode","length","components_Weather_Weather","components_Title_Title","components_Form_Form","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6229e9f8.chunk.js","sourcesContent":["import React from 'react'\nimport './Title.scss'\n\nconst Title = () => {\n    return (\n        <div>\n            <p className=\"f3 underline b\">Weather Teller</p>\n        </div>\n    )\n}\n\nexport default Title","import React from 'react';\n\nconst Form = ({onInputChange, onButtonSubmit}) => {\n    return (\n        <div className=\"pa3\">\n            <div style={{\n                backgroundColor: '#DCBF54'\n\n            }} \n            className=\"shadow-5 bg-gray mw7 center pa4 br3\">\n                <fieldset className=\"cf bn ma0 pa0\">\n                    <div className=\"cf\">\n                        <input \n                            className=\"f6 bn fl black-80 bg-light-gray pa3 w-80-l br2\"\n                            type='text' \n                            name='city' \n                            placeholder='City or Country'\n                            onChange={onInputChange}\n                        />\n                        <button \n                        className=\"dim f6 fl pv3 tc bn bg-near-black white w-20-l br2\"\n                        type='submit'\n                        onClick={onButtonSubmit}\n                        > Search\n                        </button>\n                    </div>\n                </fieldset>\n            </div>\n\n \n\n\n \n            \n        </div>\n    )\n} \n\nexport default Form;\n","import React from 'react'\nimport './Weather.scss';\n\nconst Weather = ({icon, weather, degree, country, city, description}) => {\n    \n    return (\n        <div>\n            <img className=\"icon\" src={`http://openweathermap.org/img/w/${icon}.png`} alt={`Weather Icon`}/>\n            <div className=\"res\">\n                <p className=\"f4\">{weather}</p>\n                <p className=\"f4\">{degree}Â°C in {city}, {country}</p>\n                <p className=\"f4\">{description}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Weather;","import React, { Component } from 'react';\nimport Title from './components/Title/Title';\nimport Form from './components/Form/Form';\nimport Weather from './components/Weather/Weather';\nimport './App.scss';\n\n\nconst api = '184eeddb6d9ee109f6cf62b5ddd96170';\n\nclass App extends Component {\n  constructor(){\n    super()\n    \n    this.state = {\n      input: ``,\n      icon: ``,\n      condition: ``,\n      degree: ``,\n      sys: ``,\n      name: ``,\n      description: ``\n    }\n  }\n\n \n  getWeather = async (location) => {\n    try {\t\n      const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${location}&APPID=${api}&units=metric`)  \n      const data = await res.json();\t\n      console.log(`Response goes here:`, data);\t\n      this.setState({\n        icon: data.weather[0].icon,\n        temp: data.main.temp,\n        condition: data.weather[0].main,\n        sys: data.sys.country,\n        name: data.name,\n        description: data.weather[0].description\n      })\n      console.log(this.state.icon)\n   \n    } \t\n    catch(error) {\t\n     console.log(error);\t\n   } \n  }\n\n\n\n  //Input from the form by the user sets to a state\n  onInputChange = (e) => {\n    this.setState({input: e.target.value})\n  }\n\n  //Button click picks location from its state and gets the weather\n  onButtonSubmit = () => {\n    this.getWeather(this.state.input)\n  } \n\n  onKeyPress = (event) => {\n\t\tif(event.keyCode === 13 || event.charCode ===13) {\n      this.getWeather(this.state.input)\n\t\t}\n\t}        \n  \n\n  componentDidMount(){\n    this.getWeather();\n  }\n  \n  \n\n  render() {\n\n    let res;\n\n    (this.state.input.length === 0) ?\n    res = <p></p>:\n    res =   <Weather\n    className=\"weather-component\"\n    icon={this.state.icon}\n    weather={this.state.condition}\n    degree={this.state.temp}\n    country={this.state.sys}\n    city={this.state.name}\n    description={this.state.description}\n  />\n\n    return (\n      <div className=\"App\">\n        <div className=\"app\">\n          <Title\n            className=\"title-component\"\n          />\n          <Form \n            className=\"form-component\"\n            onInputChange={this.onInputChange}\n            onButtonSubmit={this.onButtonSubmit}\n          />\n          {res} \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//http://api.openweathermap.org/data/2.5/weather?q=Uyo&APPID=60904ad34cc4a921e9b3bcaccc9529f4\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}